# coding: utf-8

"""
Codesphere Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from codesphere_sdk.models.domains_get_domain200_response import (
    DomainsGetDomain200Response,
)


class TestDomainsGetDomain200Response(unittest.TestCase):
    """DomainsGetDomain200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DomainsGetDomain200Response:
        """Test DomainsGetDomain200Response
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `DomainsGetDomain200Response`
        """
        model = DomainsGetDomain200Response()
        if include_optional:
            return DomainsGetDomain200Response(
                team_id = 0,
                data_center_id = 0,
                workspaces = {
                    'key' : [
                        0
                        ]
                    },
                name = '',
                certificate_request_status = codesphere_sdk.models.domains_get_domain_200_response_certificate_request_status.domains_getDomain_200_response_certificateRequestStatus(
                    issued = True, 
                    reason = '', ),
                dns_entries = codesphere_sdk.models.domains_get_domain_200_response_dns_entries.domains_getDomain_200_response_dnsEntries(
                    a = '', 
                    cname = '', 
                    txt = '', ),
                domain_verification_status = codesphere_sdk.models.domains_get_domain_200_response_domain_verification_status.domains_getDomain_200_response_domainVerificationStatus(
                    verified = True, 
                    reason = '', ),
                custom_config_revision = 0,
                custom_config = codesphere_sdk.models.domains_get_domain_200_response_custom_config.domains_getDomain_200_response_customConfig(
                    max_body_size_mb = 1.337, 
                    max_connection_timeout_s = 1.337, 
                    use_regex = True, 
                    restricted = True, )
            )
        else:
            return DomainsGetDomain200Response(
                team_id = 0,
                data_center_id = 0,
                workspaces = {
                    'key' : [
                        0
                        ]
                    },
                name = '',
                certificate_request_status = codesphere_sdk.models.domains_get_domain_200_response_certificate_request_status.domains_getDomain_200_response_certificateRequestStatus(
                    issued = True, 
                    reason = '', ),
                dns_entries = codesphere_sdk.models.domains_get_domain_200_response_dns_entries.domains_getDomain_200_response_dnsEntries(
                    a = '', 
                    cname = '', 
                    txt = '', ),
                domain_verification_status = codesphere_sdk.models.domains_get_domain_200_response_domain_verification_status.domains_getDomain_200_response_domainVerificationStatus(
                    verified = True, 
                    reason = '', ),
        )
        """

    def testDomainsGetDomain200Response(self):
        """Test DomainsGetDomain200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
